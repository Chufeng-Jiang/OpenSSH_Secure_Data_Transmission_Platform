// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Persion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Persion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Persion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Persion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Persion_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Persion_2eproto;
namespace itcast {
class Persion;
struct PersionDefaultTypeInternal;
extern PersionDefaultTypeInternal _Persion_default_instance_;
}  // namespace itcast
PROTOBUF_NAMESPACE_OPEN
template<> ::itcast::Persion* Arena::CreateMaybeMessage<::itcast::Persion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace itcast {

enum Color : int {
  Red = 0,
  Green = 6,
  Blue = 9,
  Color_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Color_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Color_IsValid(int value);
constexpr Color Color_MIN = Red;
constexpr Color Color_MAX = Blue;
constexpr int Color_ARRAYSIZE = Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor();
template<typename T>
inline const std::string& Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_descriptor(), enum_t_value);
}
inline bool Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
// ===================================================================

class Persion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:itcast.Persion) */ {
 public:
  inline Persion() : Persion(nullptr) {}
  ~Persion() override;
  explicit constexpr Persion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Persion(const Persion& from);
  Persion(Persion&& from) noexcept
    : Persion() {
    *this = ::std::move(from);
  }

  inline Persion& operator=(const Persion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Persion& operator=(Persion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Persion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Persion* internal_default_instance() {
    return reinterpret_cast<const Persion*>(
               &_Persion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Persion& a, Persion& b) {
    a.Swap(&b);
  }
  inline void Swap(Persion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Persion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Persion* New() const final {
    return new Persion();
  }

  Persion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Persion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Persion& from);
  void MergeFrom(const Persion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Persion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "itcast.Persion";
  }
  protected:
  explicit Persion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSexFieldNumber = 3,
    kInfoFieldNumber = 6,
    kIdFieldNumber = 1,
    kAgeFieldNumber = 4,
    kColorFieldNumber = 5,
  };
  // repeated bytes name = 2;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const void* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // string sex = 3;
  void clear_sex();
  const std::string& sex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sex();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // .itheima.Persion info = 6;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::itheima::Persion& info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::itheima::Persion* release_info();
  ::itheima::Persion* mutable_info();
  void set_allocated_info(::itheima::Persion* info);
  private:
  const ::itheima::Persion& _internal_info() const;
  ::itheima::Persion* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::itheima::Persion* info);
  ::itheima::Persion* unsafe_arena_release_info();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 age = 4;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .itcast.Color color = 5;
  void clear_color();
  ::itcast::Color color() const;
  void set_color(::itcast::Color value);
  private:
  ::itcast::Color _internal_color() const;
  void _internal_set_color(::itcast::Color value);
  public:

  // @@protoc_insertion_point(class_scope:itcast.Persion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::itheima::Persion* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  int color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Persion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Persion

// int32 id = 1;
inline void Persion::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Persion::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Persion::id() const {
  // @@protoc_insertion_point(field_get:itcast.Persion.id)
  return _internal_id();
}
inline void Persion::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Persion::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:itcast.Persion.id)
}

// repeated bytes name = 2;
inline int Persion::_internal_name_size() const {
  return name_.size();
}
inline int Persion::name_size() const {
  return _internal_name_size();
}
inline void Persion::clear_name() {
  name_.Clear();
}
inline std::string* Persion::add_name() {
  // @@protoc_insertion_point(field_add_mutable:itcast.Persion.name)
  return _internal_add_name();
}
inline const std::string& Persion::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& Persion::name(int index) const {
  // @@protoc_insertion_point(field_get:itcast.Persion.name)
  return _internal_name(index);
}
inline std::string* Persion::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:itcast.Persion.name)
  return name_.Mutable(index);
}
inline void Persion::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:itcast.Persion.name)
  name_.Mutable(index)->assign(value);
}
inline void Persion::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:itcast.Persion.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void Persion::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:itcast.Persion.name)
}
inline void Persion::set_name(int index, const void* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:itcast.Persion.name)
}
inline std::string* Persion::_internal_add_name() {
  return name_.Add();
}
inline void Persion::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:itcast.Persion.name)
}
inline void Persion::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:itcast.Persion.name)
}
inline void Persion::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:itcast.Persion.name)
}
inline void Persion::add_name(const void* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:itcast.Persion.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Persion::name() const {
  // @@protoc_insertion_point(field_list:itcast.Persion.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Persion::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:itcast.Persion.name)
  return &name_;
}

// string sex = 3;
inline void Persion::clear_sex() {
  sex_.ClearToEmpty();
}
inline const std::string& Persion::sex() const {
  // @@protoc_insertion_point(field_get:itcast.Persion.sex)
  return _internal_sex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Persion::set_sex(ArgT0&& arg0, ArgT... args) {
 
 sex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:itcast.Persion.sex)
}
inline std::string* Persion::mutable_sex() {
  // @@protoc_insertion_point(field_mutable:itcast.Persion.sex)
  return _internal_mutable_sex();
}
inline const std::string& Persion::_internal_sex() const {
  return sex_.Get();
}
inline void Persion::_internal_set_sex(const std::string& value) {
  
  sex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Persion::_internal_mutable_sex() {
  
  return sex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Persion::release_sex() {
  // @@protoc_insertion_point(field_release:itcast.Persion.sex)
  return sex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Persion::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:itcast.Persion.sex)
}

// int32 age = 4;
inline void Persion::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Persion::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Persion::age() const {
  // @@protoc_insertion_point(field_get:itcast.Persion.age)
  return _internal_age();
}
inline void Persion::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void Persion::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:itcast.Persion.age)
}

// .itcast.Color color = 5;
inline void Persion::clear_color() {
  color_ = 0;
}
inline ::itcast::Color Persion::_internal_color() const {
  return static_cast< ::itcast::Color >(color_);
}
inline ::itcast::Color Persion::color() const {
  // @@protoc_insertion_point(field_get:itcast.Persion.color)
  return _internal_color();
}
inline void Persion::_internal_set_color(::itcast::Color value) {
  
  color_ = value;
}
inline void Persion::set_color(::itcast::Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:itcast.Persion.color)
}

// .itheima.Persion info = 6;
inline bool Persion::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool Persion::has_info() const {
  return _internal_has_info();
}
inline const ::itheima::Persion& Persion::_internal_info() const {
  const ::itheima::Persion* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::itheima::Persion&>(
      ::itheima::_Persion_default_instance_);
}
inline const ::itheima::Persion& Persion::info() const {
  // @@protoc_insertion_point(field_get:itcast.Persion.info)
  return _internal_info();
}
inline void Persion::unsafe_arena_set_allocated_info(
    ::itheima::Persion* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:itcast.Persion.info)
}
inline ::itheima::Persion* Persion::release_info() {
  
  ::itheima::Persion* temp = info_;
  info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::itheima::Persion* Persion::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:itcast.Persion.info)
  
  ::itheima::Persion* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::itheima::Persion* Persion::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::itheima::Persion>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::itheima::Persion* Persion::mutable_info() {
  // @@protoc_insertion_point(field_mutable:itcast.Persion.info)
  return _internal_mutable_info();
}
inline void Persion::set_allocated_info(::itheima::Persion* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:itcast.Persion.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace itcast

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::itcast::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::itcast::Color>() {
  return ::itcast::Color_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Persion_2eproto
